#
# Proftpd sample configuration for SQL-based authentication.
# (This is not to be used if you prefer a PAM-based SQL authentication)
# based on default proftpd config debian jessie, modify ^SQLConnectInfo
#
# Thanks to Robert Tulke <rt@debian.sh>
# https://github.com/rtulke/

<IfModule mod_sql.c>
# Choose a SQL backend among SQLite3, MySQL or PostgreSQL.
# Both modules are loaded in default configuration, so you have to specify the backend
# or comment out the unused module in /etc/proftpd/modules.conf.
#
#
	SQLEngine on
	SQLAuthenticate on

		<IfModule mod_sql_mysql.c>
			SQLBackend              mysql
			SQLAuthTypes            Crypt
			SQLConnectInfo          proftpd@localhost proftpd yourdbpasswordhere
		</IfModule>


		<IfModule mod_sql_sqlite.c>
			# SQL backend is Sqlite
			SQLBackend	sqlite3
			SQLAuthTypes            pbkdf2
			SQLPasswordPBKDF2       sha1 5000 20
			SQLPasswordUserSalt     name Prepend
			SQLPasswordEncoding     hex
			SQLConnectInfo          /path/to/auth.sqlite3
		</IfModule>

		SQLLogFile              /var/log/proftpd/proftpd-sql.log
		CreateHome              on 750
		SQLEngine               on
		SQLPasswordEngine       on
		SQLAuthenticate         on

		SQLUserInfo             users userid passwd uid gid homedir shell
		SQLGroupInfo            groups groupname gid members
		SQLUserWhereClause      "disabled != 1"
		SQLLog PASS             updatecount
		SQLNamedQuery           updatecount UPDATE "login_count=login_count+1, last_login=now() WHERE userid='%u'" users

		# Update the users.last_accessed column on successful login in the userdb
		SQLNamedQuery last_accessed UPDATE "last_accessed = NOW() WHERE userid='%u'" users
		SQLLog PASS last_accessed

		# Add a row to the login_history table on successful login in the logdb
		SQLNamedQuery log_sess FREEFORM "INSERT INTO login_history (username, client_ip, server_ip, protocol, login_time) VALUES ('%u', '%a', '%V', '%{protocol}', NOW())" 

		 # Used to track xfer traffic per user (without invoking a quota)
		SQLLog RETR             bytes-out-count
		SQLNamedQuery           bytes-out-count UPDATE "bytes_out_used=bytes_out_used+%b WHERE userid='%u'" users
		SQLLog RETR             files-out-count
		SQLNamedQuery           files-out-count UPDATE "files_out_used=files_out_used+1 WHERE userid='%u'" users

		SQLLog STOR             bytes-in-count
		SQLNamedQuery           bytes-in-count UPDATE "bytes_in_used=bytes_in_used+%b WHERE userid='%u'" users
		SQLLog STOR             files-in-count
		SQLNamedQuery           files-in-count UPDATE "files_in_used=files_in_used+1 WHERE userid='%u'" users

		# Define a SELECT statement to retrieve users' authorized SSH keys
		SQLNamedQuery get-user-authorized-keys SELECT "sshpubkey FROM users WHERE userid='%u'"

		# Define a SELECT statement to retrieve hosts' authorized SSH keys
		# SQLNamedQuery get-host-authorized-keys SELECT "hostkey FROM sftphostkeys WHERE host='%{0}'"

</IfModule>
